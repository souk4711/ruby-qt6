#include "qwidget-rb.hpp"
#include <qwidget.h>

#include <QBackingStore>
#include <QGraphicsEffect>
#include <QGraphicsProxyWidget>
#include <QLayout>
#include <QLocale>
#include <QPaintEngine>
#include <QScreen>
#include <QStyle>
#include <QWindow>

using namespace Rice;

Rice::Class rb_cQWidget;

void Init_qwidget(Rice::Module rb_mQt6QtWidgets)
{
    rb_cQWidget =
        // RubyQt6::QtWidgets::QWidget
        define_class_under<QWidget, QObject>(rb_mQt6QtWidgets, "QWidget")
            .define_constructor(Constructor<QWidget, QWidget *, Qt::WindowFlags>(), Arg("parent") = static_cast<QWidget *>(nullptr), Arg("f") = static_cast<Qt::WindowFlags>(Qt::WindowFlags()))
            .define_method("_color_count", &QWidget::colorCount)
            .define_method("_depth", &QWidget::depth)
            .define_method("_device_pixel_ratio", &QWidget::devicePixelRatio)
            .define_method("_device_pixel_ratio_f", &QWidget::devicePixelRatioF)
            .define_method("_height", &QWidget::height)
            .define_method("_height_mm", &QWidget::heightMM)
            .define_method("_width", &QWidget::width)
            .define_method("_width_mm", &QWidget::widthMM)
            .define_method("_logical_dpi_x", &QWidget::logicalDpiX)
            .define_method("_logical_dpi_y", &QWidget::logicalDpiY)
            .define_method("_physical_dpi_x", &QWidget::physicalDpiX)
            .define_method("_physical_dpi_y", &QWidget::physicalDpiY)
            .define_method("_painting_active?", &QWidget::paintingActive)
            .define_method("_paint_engine", &QWidget::paintEngine)
            .define_method("_dev_type", &QWidget::devType)
            .define_method("_full_screen?", &QWidget::isFullScreen)
            .define_method("_maximized?", &QWidget::isMaximized)
            .define_method("_minimized?", &QWidget::isMinimized)
            .define_method("_window_modified?", &QWidget::isWindowModified)
            .define_method("_window_title", &QWidget::windowTitle)
            .define_method("_window_icon", &QWidget::windowIcon)
            .define_method("_active_window?", &QWidget::isActiveWindow)
            .define_method("_show", &QWidget::show)
            .define_method("_show_full_screen", &QWidget::showFullScreen)
            .define_method("_show_maximized", &QWidget::showMaximized)
            .define_method("_show_minimized", &QWidget::showMinimized)
            .define_method("_show_normal", &QWidget::showNormal)
            .define_method("_hide", &QWidget::hide)
            .define_method("_raise", &QWidget::raise)
            .define_method("_lower", &QWidget::lower)
            .define_method("_close", &QWidget::close)
            .define_method("_set_window_modified", &QWidget::setWindowModified, Arg("modified"))
            .define_method("_set_window_title", &QWidget::setWindowTitle, Arg("title"))
            .define_method("_set_window_icon", &QWidget::setWindowIcon, Arg("icon"))
            .define_method("_activate_window", &QWidget::activateWindow)
            .define_method<void (QWidget::*)()>("_update", &QWidget::update)
            .define_method<void (QWidget::*)(const QRect &)>("_update", &QWidget::update, Arg("r"))
            .define_method<void (QWidget::*)(const QRegion &)>("_update", &QWidget::update, Arg("r"))
            .define_method<void (QWidget::*)(int, int, int, int)>("_update", &QWidget::update, Arg("x"), Arg("y"), Arg("w"), Arg("h"))
            .define_method<void (QWidget::*)()>("_repaint", &QWidget::repaint)
            .define_method<void (QWidget::*)(const QRect &)>("_repaint", &QWidget::repaint, Arg("r"))
            .define_method<void (QWidget::*)(const QRegion &)>("_repaint", &QWidget::repaint, Arg("r"))
            .define_method<void (QWidget::*)(int, int, int, int)>("_repaint", &QWidget::repaint, Arg("x"), Arg("y"), Arg("w"), Arg("h"))
            .define_method<void (QWidget::*)(int, int)>("_scroll", &QWidget::scroll, Arg("dx"), Arg("dy"))
            .define_method<void (QWidget::*)(int, int, const QRect &)>("_scroll", &QWidget::scroll, Arg("dx"), Arg("dy"), Arg("r"))
            .define_method("_pos", &QWidget::pos)
            .define_method("_x", &QWidget::x)
            .define_method("_y", &QWidget::y)
            .define_method("_rect", &QWidget::rect)
            .define_method("_size", &QWidget::size)
            .define_method("_width", &QWidget::width)
            .define_method("_height", &QWidget::height)
            .define_method("_geometry", &QWidget::geometry)
            .define_method("_maximum_size", &QWidget::maximumSize)
            .define_method("_maximum_width", &QWidget::maximumWidth)
            .define_method("_maximum_height", &QWidget::maximumHeight)
            .define_method("_minimum_size", &QWidget::minimumSize)
            .define_method("_minimum_width", &QWidget::minimumWidth)
            .define_method("_minimum_height", &QWidget::minimumHeight)
            .define_method("_layout", &QWidget::layout)
            .define_method("_size_policy", &QWidget::sizePolicy)
            .define_method("_size_hint", &QWidget::sizeHint)
            .define_method("_minimum_size_hint", &QWidget::minimumSizeHint)
            .define_method("_base_size", &QWidget::baseSize)
            .define_method("_size_increment", &QWidget::sizeIncrement)
            .define_method("_children_rect", &QWidget::childrenRect)
            .define_method("_children_region", &QWidget::childrenRegion)
            .define_method("_frame_geometry", &QWidget::frameGeometry)
            .define_method("_frame_size", &QWidget::frameSize)
            .define_method<void (QWidget::*)(const QPoint &)>("_move", &QWidget::move, Arg("pos"))
            .define_method<void (QWidget::*)(int, int)>("_move", &QWidget::move, Arg("x"), Arg("y"))
            .define_method<void (QWidget::*)(const QSize &)>("_resize", &QWidget::resize, Arg("size"))
            .define_method<void (QWidget::*)(int, int)>("_resize", &QWidget::resize, Arg("w"), Arg("h"))
            .define_method<void (QWidget::*)(const QRect &)>("_set_geometry", &QWidget::setGeometry, Arg("rect"))
            .define_method<void (QWidget::*)(int, int, int, int)>("_set_geometry", &QWidget::setGeometry, Arg("x"), Arg("y"), Arg("w"), Arg("h"))
            .define_method<void (QWidget::*)(const QSize &)>("_set_maximum_size", &QWidget::setMaximumSize, Arg("size"))
            .define_method<void (QWidget::*)(int, int)>("_set_maximum_size", &QWidget::setMaximumSize, Arg("w"), Arg("h"))
            .define_method("_set_maximum_width", &QWidget::setMaximumWidth, Arg("w"))
            .define_method("_set_maximum_height", &QWidget::setMaximumHeight, Arg("h"))
            .define_method<void (QWidget::*)(const QSize &)>("_set_minimum_size", &QWidget::setMinimumSize, Arg("size"))
            .define_method<void (QWidget::*)(int, int)>("_set_minimum_size", &QWidget::setMinimumSize, Arg("w"), Arg("h"))
            .define_method("_set_minimum_width", &QWidget::setMinimumWidth, Arg("w"))
            .define_method("_set_minimum_height", &QWidget::setMinimumHeight, Arg("h"))
            .define_method<void (QWidget::*)(const QSize &)>("_set_fixed_size", &QWidget::setFixedSize, Arg("size"))
            .define_method<void (QWidget::*)(int, int)>("_set_fixed_size", &QWidget::setFixedSize, Arg("w"), Arg("h"))
            .define_method("_set_fixed_width", &QWidget::setFixedWidth, Arg("w"))
            .define_method("_set_fixed_height", &QWidget::setFixedHeight, Arg("h"))
            .define_method("_set_layout", &QWidget::setLayout, Arg("layout").takeOwnership())
            .define_method("_adjust_size", &QWidget::adjustSize)
            .define_method<void (QWidget::*)(QSizePolicy)>("_set_size_policy", &QWidget::setSizePolicy, Arg("policy"))
            .define_method<void (QWidget::*)(QSizePolicy::Policy, QSizePolicy::Policy)>("_set_size_policy", &QWidget::setSizePolicy, Arg("horizontal"), Arg("vertical"))
            .define_method<void (QWidget::*)(const QSize &)>("_set_base_size", &QWidget::setBaseSize, Arg("size"))
            .define_method<void (QWidget::*)(int, int)>("_set_base_size", &QWidget::setBaseSize, Arg("w"), Arg("h"))
            .define_method<void (QWidget::*)(const QSize &)>("_set_size_increment", &QWidget::setSizeIncrement, Arg("size"))
            .define_method<void (QWidget::*)(int, int)>("_set_size_increment", &QWidget::setSizeIncrement, Arg("w"), Arg("h"))
            .define_method("_cursor", &QWidget::cursor)
            .define_method("_font", &QWidget::font)
            .define_method("_font_info", &QWidget::fontInfo)
            .define_method("_font_metrics", &QWidget::fontMetrics)
            .define_method("_palette", &QWidget::palette)
            .define_method("_background_role", &QWidget::backgroundRole)
            .define_method("_foreground_role", &QWidget::foregroundRole)
            .define_method("_style", &QWidget::style)
            .define_method("_style_sheet", &QWidget::styleSheet)
            .define_method("_set_cursor", &QWidget::setCursor, Arg("cursor"))
            .define_method("_unset_cursor", &QWidget::unsetCursor)
            .define_method("_set_font", &QWidget::setFont, Arg("font"))
            .define_method("_set_palette", &QWidget::setPalette, Arg("palette"))
            .define_method("_set_background_role", &QWidget::setBackgroundRole, Arg("color_role"))
            .define_method("_set_foreground_role", &QWidget::setForegroundRole, Arg("color_role"))
            .define_method("_set_style", &QWidget::setStyle, Arg("style"))
            .define_method("_set_style_sheet", &QWidget::setStyleSheet, Arg("style_sheet"))
            .define_method("_status_tip", &QWidget::statusTip)
            .define_method("_tool_tip", &QWidget::toolTip)
            .define_method("_tool_tip_duration", &QWidget::toolTipDuration)
            .define_method("_whats_this", &QWidget::whatsThis)
            .define_method("_set_status_tip", &QWidget::setStatusTip, Arg("tip"))
            .define_method("_set_tool_tip", &QWidget::setToolTip, Arg("tip"))
            .define_method("_set_tool_tip_duration", &QWidget::setToolTipDuration, Arg("msec"))
            .define_method("_set_whats_this", &QWidget::setWhatsThis, Arg("help"));
}
