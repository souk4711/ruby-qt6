#include "qpainter-rb.hpp"
#include <qpainter.h>

#include <QGlyphRun>
#include <QList>
#include <QPainterPath>
#include <QPicture>
#include <QStaticText>
#include <QTextItem>

using namespace Rice;

Rice::Class rb_cQPainter;

void Init_qpainter(Rice::Module rb_mQt6QtGui)
{
    rb_cQPainter =
        // RubyQt6::QtGui::QPainter
        define_class_under<QPainter>(rb_mQt6QtGui, "QPainter")
            // Constructor
            .define_constructor(Constructor<QPainter, QPaintDevice *>(), Arg("device"))
            // Public Functions
            .define_method("background", &QPainter::background)
            .define_method("background_mode", &QPainter::backgroundMode)
            .define_method("begin_native_painting", &QPainter::beginNativePainting)
            .define_method<QRect (QPainter::*)(const QRect &, int, const QString &)>("bounding_rect", &QPainter::boundingRect, Arg("rect"), Arg("flags"), Arg("text"))
            .define_method<QRect (QPainter::*)(int, int, int, int, int, const QString &)>("bounding_rect", &QPainter::boundingRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("flags"), Arg("text"))
            .define_method<QRectF (QPainter::*)(const QRectF &, const QString &, const QTextOption &)>("bounding_rect", &QPainter::boundingRect, Arg("rect"), Arg("text"), Arg("o") = static_cast<const QTextOption &>(QTextOption()))
            .define_method<QRectF (QPainter::*)(const QRectF &, int, const QString &)>("bounding_rect", &QPainter::boundingRect, Arg("rect"), Arg("flags"), Arg("text"))
            .define_method("brush", &QPainter::brush)
            .define_method("brush_origin", &QPainter::brushOrigin)
            .define_method("clip_bounding_rect", &QPainter::clipBoundingRect)
            .define_method("clip_path", &QPainter::clipPath)
            .define_method("clip_region", &QPainter::clipRegion)
            .define_method("combined_transform", &QPainter::combinedTransform)
            .define_method("composition_mode", &QPainter::compositionMode)
            .define_method("device", &QPainter::device)
            .define_method("device_transform", &QPainter::deviceTransform)
            .define_method<void (QPainter::*)(const QRect &, int, int)>("draw_arc", &QPainter::drawArc, Arg(""), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(const QRectF &, int, int)>("draw_arc", &QPainter::drawArc, Arg("rect"), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(int, int, int, int, int, int)>("draw_arc", &QPainter::drawArc, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(const QRect &, int, int)>("draw_chord", &QPainter::drawChord, Arg(""), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(const QRectF &, int, int)>("draw_chord", &QPainter::drawChord, Arg("rect"), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(int, int, int, int, int, int)>("draw_chord", &QPainter::drawChord, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(const QPoint *, int)>("draw_convex_polygon", &QPainter::drawConvexPolygon, Arg("points"), Arg("point_count"))
            .define_method<void (QPainter::*)(const QPointF *, int)>("draw_convex_polygon", &QPainter::drawConvexPolygon, Arg("points"), Arg("point_count"))
            .define_method<void (QPainter::*)(const QPolygon &)>("draw_convex_polygon", &QPainter::drawConvexPolygon, Arg("polygon"))
            .define_method<void (QPainter::*)(const QPolygonF &)>("draw_convex_polygon", &QPainter::drawConvexPolygon, Arg("polygon"))
            .define_method<void (QPainter::*)(const QPoint &, int, int)>("draw_ellipse", &QPainter::drawEllipse, Arg("center"), Arg("rx"), Arg("ry"))
            .define_method<void (QPainter::*)(const QPointF &, qreal, qreal)>("draw_ellipse", &QPainter::drawEllipse, Arg("center"), Arg("rx"), Arg("ry"))
            .define_method<void (QPainter::*)(const QRect &)>("draw_ellipse", &QPainter::drawEllipse, Arg("r"))
            .define_method<void (QPainter::*)(const QRectF &)>("draw_ellipse", &QPainter::drawEllipse, Arg("r"))
            .define_method<void (QPainter::*)(int, int, int, int)>("draw_ellipse", &QPainter::drawEllipse, Arg("x"), Arg("y"), Arg("w"), Arg("h"))
            .define_method("draw_glyph_run", &QPainter::drawGlyphRun, Arg("position"), Arg("glyph_run"))
            .define_method<void (QPainter::*)(const QPoint &, const QImage &)>("draw_image", &QPainter::drawImage, Arg("p"), Arg("image"))
            .define_method<void (QPainter::*)(const QPoint &, const QImage &, const QRect &, Qt::ImageConversionFlags)>("draw_image", &QPainter::drawImage, Arg("p"), Arg("image"), Arg("sr"), Arg("flags") = static_cast<Qt::ImageConversionFlags>(Qt::AutoColor))
            .define_method<void (QPainter::*)(const QPointF &, const QImage &)>("draw_image", &QPainter::drawImage, Arg("p"), Arg("image"))
            .define_method<void (QPainter::*)(const QPointF &, const QImage &, const QRectF &, Qt::ImageConversionFlags)>("draw_image", &QPainter::drawImage, Arg("p"), Arg("image"), Arg("sr"), Arg("flags") = static_cast<Qt::ImageConversionFlags>(Qt::AutoColor))
            .define_method<void (QPainter::*)(const QRect &, const QImage &)>("draw_image", &QPainter::drawImage, Arg("r"), Arg("image"))
            .define_method<void (QPainter::*)(const QRect &, const QImage &, const QRect &, Qt::ImageConversionFlags)>("draw_image", &QPainter::drawImage, Arg("target_rect"), Arg("image"), Arg("source_rect"), Arg("flags") = static_cast<Qt::ImageConversionFlags>(Qt::AutoColor))
            .define_method<void (QPainter::*)(const QRectF &, const QImage &)>("draw_image", &QPainter::drawImage, Arg("r"), Arg("image"))
            .define_method<void (QPainter::*)(const QRectF &, const QImage &, const QRectF &, Qt::ImageConversionFlags)>("draw_image", &QPainter::drawImage, Arg("target_rect"), Arg("image"), Arg("source_rect"), Arg("flags") = static_cast<Qt::ImageConversionFlags>(Qt::AutoColor))
            .define_method<void (QPainter::*)(int, int, const QImage &, int, int, int, int, Qt::ImageConversionFlags)>("draw_image", &QPainter::drawImage, Arg("x"), Arg("y"), Arg("image"), Arg("sx") = static_cast<int>(0), Arg("sy") = static_cast<int>(0), Arg("sw") = static_cast<int>(-1), Arg("sh") = static_cast<int>(-1), Arg("flags") = static_cast<Qt::ImageConversionFlags>(Qt::AutoColor))
            .define_method<void (QPainter::*)(const QLine &)>("draw_line", &QPainter::drawLine, Arg("line"))
            .define_method<void (QPainter::*)(const QLineF &)>("draw_line", &QPainter::drawLine, Arg("line"))
            .define_method<void (QPainter::*)(const QPoint &, const QPoint &)>("draw_line", &QPainter::drawLine, Arg("p1"), Arg("p2"))
            .define_method<void (QPainter::*)(const QPointF &, const QPointF &)>("draw_line", &QPainter::drawLine, Arg("p1"), Arg("p2"))
            .define_method<void (QPainter::*)(int, int, int, int)>("draw_line", &QPainter::drawLine, Arg("x1"), Arg("y1"), Arg("x2"), Arg("y2"))
            .define_method<void (QPainter::*)(const QLine *, int)>("draw_lines", &QPainter::drawLines, Arg("lines"), Arg("line_count"))
            .define_method<void (QPainter::*)(const QLineF *, int)>("draw_lines", &QPainter::drawLines, Arg("lines"), Arg("line_count"))
            .define_method<void (QPainter::*)(const QList<QLine> &)>("draw_lines", &QPainter::drawLines, Arg("lines"))
            .define_method<void (QPainter::*)(const QList<QLineF> &)>("draw_lines", &QPainter::drawLines, Arg("lines"))
            .define_method<void (QPainter::*)(const QList<QPoint> &)>("draw_lines", &QPainter::drawLines, Arg("point_pairs"))
            .define_method<void (QPainter::*)(const QList<QPointF> &)>("draw_lines", &QPainter::drawLines, Arg("point_pairs"))
            .define_method<void (QPainter::*)(const QPoint *, int)>("draw_lines", &QPainter::drawLines, Arg("point_pairs"), Arg("line_count"))
            .define_method<void (QPainter::*)(const QPointF *, int)>("draw_lines", &QPainter::drawLines, Arg("point_pairs"), Arg("line_count"))
            .define_method("draw_path", &QPainter::drawPath, Arg("path"))
            .define_method<void (QPainter::*)(const QPoint &, const QPicture &)>("draw_picture", &QPainter::drawPicture, Arg("p"), Arg("picture"))
            .define_method<void (QPainter::*)(const QPointF &, const QPicture &)>("draw_picture", &QPainter::drawPicture, Arg("p"), Arg("picture"))
            .define_method<void (QPainter::*)(int, int, const QPicture &)>("draw_picture", &QPainter::drawPicture, Arg("x"), Arg("y"), Arg("picture"))
            .define_method<void (QPainter::*)(const QRect &, int, int)>("draw_pie", &QPainter::drawPie, Arg(""), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(const QRectF &, int, int)>("draw_pie", &QPainter::drawPie, Arg("rect"), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(int, int, int, int, int, int)>("draw_pie", &QPainter::drawPie, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("a"), Arg("alen"))
            .define_method<void (QPainter::*)(const QPoint &, const QPixmap &)>("draw_pixmap", &QPainter::drawPixmap, Arg("p"), Arg("pm"))
            .define_method<void (QPainter::*)(const QPoint &, const QPixmap &, const QRect &)>("draw_pixmap", &QPainter::drawPixmap, Arg("p"), Arg("pm"), Arg("sr"))
            .define_method<void (QPainter::*)(const QPointF &, const QPixmap &)>("draw_pixmap", &QPainter::drawPixmap, Arg("p"), Arg("pm"))
            .define_method<void (QPainter::*)(const QPointF &, const QPixmap &, const QRectF &)>("draw_pixmap", &QPainter::drawPixmap, Arg("p"), Arg("pm"), Arg("sr"))
            .define_method<void (QPainter::*)(const QRect &, const QPixmap &)>("draw_pixmap", &QPainter::drawPixmap, Arg("r"), Arg("pm"))
            .define_method<void (QPainter::*)(const QRect &, const QPixmap &, const QRect &)>("draw_pixmap", &QPainter::drawPixmap, Arg("target_rect"), Arg("pixmap"), Arg("source_rect"))
            .define_method<void (QPainter::*)(const QRectF &, const QPixmap &, const QRectF &)>("draw_pixmap", &QPainter::drawPixmap, Arg("target_rect"), Arg("pixmap"), Arg("source_rect"))
            .define_method<void (QPainter::*)(int, int, const QPixmap &)>("draw_pixmap", &QPainter::drawPixmap, Arg("x"), Arg("y"), Arg("pm"))
            .define_method<void (QPainter::*)(int, int, const QPixmap &, int, int, int, int)>("draw_pixmap", &QPainter::drawPixmap, Arg("x"), Arg("y"), Arg("pm"), Arg("sx"), Arg("sy"), Arg("sw"), Arg("sh"))
            .define_method<void (QPainter::*)(int, int, int, int, const QPixmap &)>("draw_pixmap", &QPainter::drawPixmap, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("pm"))
            .define_method<void (QPainter::*)(int, int, int, int, const QPixmap &, int, int, int, int)>("draw_pixmap", &QPainter::drawPixmap, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("pm"), Arg("sx"), Arg("sy"), Arg("sw"), Arg("sh"))
            .define_method("draw_pixmap_fragments", &QPainter::drawPixmapFragments, Arg("fragments"), Arg("fragment_count"), Arg("pixmap"), Arg("hints") = static_cast<QPainter::PixmapFragmentHints>(QPainter::PixmapFragmentHints()))
            .define_method<void (QPainter::*)(const QPoint &)>("draw_point", &QPainter::drawPoint, Arg("p"))
            .define_method<void (QPainter::*)(const QPointF &)>("draw_point", &QPainter::drawPoint, Arg("pt"))
            .define_method<void (QPainter::*)(int, int)>("draw_point", &QPainter::drawPoint, Arg("x"), Arg("y"))
            .define_method<void (QPainter::*)(const QPoint *, int)>("draw_points", &QPainter::drawPoints, Arg("points"), Arg("point_count"))
            .define_method<void (QPainter::*)(const QPointF *, int)>("draw_points", &QPainter::drawPoints, Arg("points"), Arg("point_count"))
            .define_method<void (QPainter::*)(const QPolygon &)>("draw_points", &QPainter::drawPoints, Arg("points"))
            .define_method<void (QPainter::*)(const QPolygonF &)>("draw_points", &QPainter::drawPoints, Arg("points"))
            .define_method<void (QPainter::*)(const QPoint *, int, Qt::FillRule)>("draw_polygon", &QPainter::drawPolygon, Arg("points"), Arg("point_count"), Arg("fill_rule") = static_cast<Qt::FillRule>(Qt::OddEvenFill))
            .define_method<void (QPainter::*)(const QPointF *, int, Qt::FillRule)>("draw_polygon", &QPainter::drawPolygon, Arg("points"), Arg("point_count"), Arg("fill_rule") = static_cast<Qt::FillRule>(Qt::OddEvenFill))
            .define_method<void (QPainter::*)(const QPolygon &, Qt::FillRule)>("draw_polygon", &QPainter::drawPolygon, Arg("polygon"), Arg("fill_rule") = static_cast<Qt::FillRule>(Qt::OddEvenFill))
            .define_method<void (QPainter::*)(const QPolygonF &, Qt::FillRule)>("draw_polygon", &QPainter::drawPolygon, Arg("polygon"), Arg("fill_rule") = static_cast<Qt::FillRule>(Qt::OddEvenFill))
            .define_method<void (QPainter::*)(const QPoint *, int)>("draw_polyline", &QPainter::drawPolyline, Arg("points"), Arg("point_count"))
            .define_method<void (QPainter::*)(const QPointF *, int)>("draw_polyline", &QPainter::drawPolyline, Arg("points"), Arg("point_count"))
            .define_method<void (QPainter::*)(const QPolygon &)>("draw_polyline", &QPainter::drawPolyline, Arg("polygon"))
            .define_method<void (QPainter::*)(const QPolygonF &)>("draw_polyline", &QPainter::drawPolyline, Arg("polyline"))
            .define_method<void (QPainter::*)(const QRect &)>("draw_rect", &QPainter::drawRect, Arg("rect"))
            .define_method<void (QPainter::*)(const QRectF &)>("draw_rect", &QPainter::drawRect, Arg("rect"))
            .define_method<void (QPainter::*)(int, int, int, int)>("draw_rect", &QPainter::drawRect, Arg("x1"), Arg("y1"), Arg("w"), Arg("h"))
            .define_method<void (QPainter::*)(const QList<QRect> &)>("draw_rects", &QPainter::drawRects, Arg("rectangles"))
            .define_method<void (QPainter::*)(const QList<QRectF> &)>("draw_rects", &QPainter::drawRects, Arg("rectangles"))
            .define_method<void (QPainter::*)(const QRect *, int)>("draw_rects", &QPainter::drawRects, Arg("rects"), Arg("rect_count"))
            .define_method<void (QPainter::*)(const QRectF *, int)>("draw_rects", &QPainter::drawRects, Arg("rects"), Arg("rect_count"))
            .define_method<void (QPainter::*)(const QRect &, qreal, qreal, Qt::SizeMode)>("draw_rounded_rect", &QPainter::drawRoundedRect, Arg("rect"), Arg("x_radius"), Arg("y_radius"), Arg("mode") = static_cast<Qt::SizeMode>(Qt::AbsoluteSize))
            .define_method<void (QPainter::*)(const QRectF &, qreal, qreal, Qt::SizeMode)>("draw_rounded_rect", &QPainter::drawRoundedRect, Arg("rect"), Arg("x_radius"), Arg("y_radius"), Arg("mode") = static_cast<Qt::SizeMode>(Qt::AbsoluteSize))
            .define_method<void (QPainter::*)(int, int, int, int, qreal, qreal, Qt::SizeMode)>("draw_rounded_rect", &QPainter::drawRoundedRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("x_radius"), Arg("y_radius"), Arg("mode") = static_cast<Qt::SizeMode>(Qt::AbsoluteSize))
            .define_method<void (QPainter::*)(const QPoint &, const QStaticText &)>("draw_static_text", &QPainter::drawStaticText, Arg("top_left_position"), Arg("static_text"))
            .define_method<void (QPainter::*)(const QPointF &, const QStaticText &)>("draw_static_text", &QPainter::drawStaticText, Arg("top_left_position"), Arg("static_text"))
            .define_method<void (QPainter::*)(int, int, const QStaticText &)>("draw_static_text", &QPainter::drawStaticText, Arg("left"), Arg("top"), Arg("static_text"))
            .define_method<void (QPainter::*)(const QPoint &, const QString &)>("draw_text", &QPainter::drawText, Arg("p"), Arg("s"))
            .define_method<void (QPainter::*)(const QPointF &, const QString &)>("draw_text", &QPainter::drawText, Arg("p"), Arg("s"))
            .define_method<void (QPainter::*)(const QPointF &, const QString &, int, int)>("draw_text", &QPainter::drawText, Arg("p"), Arg("str"), Arg("tf"), Arg("justification_padding"))
            .define_method<void (QPainter::*)(const QRect &, int, const QString &, QRect *)>("draw_text", &QPainter::drawText, Arg("r"), Arg("flags"), Arg("text"), Arg("br") = static_cast<QRect *>(nullptr))
            .define_method<void (QPainter::*)(const QRectF &, const QString &, const QTextOption &)>("draw_text", &QPainter::drawText, Arg("r"), Arg("text"), Arg("o") = static_cast<const QTextOption &>(QTextOption()))
            .define_method<void (QPainter::*)(const QRectF &, int, const QString &, QRectF *)>("draw_text", &QPainter::drawText, Arg("r"), Arg("flags"), Arg("text"), Arg("br") = static_cast<QRectF *>(nullptr))
            .define_method<void (QPainter::*)(int, int, const QString &)>("draw_text", &QPainter::drawText, Arg("x"), Arg("y"), Arg("s"))
            .define_method<void (QPainter::*)(int, int, int, int, int, const QString &, QRect *)>("draw_text", &QPainter::drawText, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("flags"), Arg("text"), Arg("br") = static_cast<QRect *>(nullptr))
            .define_method<void (QPainter::*)(const QPoint &, const QTextItem &)>("draw_text_item", &QPainter::drawTextItem, Arg("p"), Arg("ti"))
            .define_method<void (QPainter::*)(const QPointF &, const QTextItem &)>("draw_text_item", &QPainter::drawTextItem, Arg("p"), Arg("ti"))
            .define_method<void (QPainter::*)(int, int, const QTextItem &)>("draw_text_item", &QPainter::drawTextItem, Arg("x"), Arg("y"), Arg("ti"))
            .define_method<void (QPainter::*)(const QRect &, const QPixmap &, const QPoint &)>("draw_tiled_pixmap", &QPainter::drawTiledPixmap, Arg(""), Arg(""), Arg("") = static_cast<const QPoint &>(QPoint()))
            .define_method<void (QPainter::*)(const QRectF &, const QPixmap &, const QPointF &)>("draw_tiled_pixmap", &QPainter::drawTiledPixmap, Arg("rect"), Arg("pm"), Arg("offset") = static_cast<const QPointF &>(QPointF()))
            .define_method<void (QPainter::*)(int, int, int, int, const QPixmap &, int, int)>("draw_tiled_pixmap", &QPainter::drawTiledPixmap, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg(""), Arg("sx") = static_cast<int>(0), Arg("sy") = static_cast<int>(0))
            .define_method("end_native_painting", &QPainter::endNativePainting)
            .define_method<void (QPainter::*)(const QRect &)>("erase_rect", &QPainter::eraseRect, Arg(""))
            .define_method<void (QPainter::*)(const QRectF &)>("erase_rect", &QPainter::eraseRect, Arg(""))
            .define_method<void (QPainter::*)(int, int, int, int)>("erase_rect", &QPainter::eraseRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"))
            .define_method("fill_path", &QPainter::fillPath, Arg("path"), Arg("brush"))
            .define_method<void (QPainter::*)(const QRect &, QGradient::Preset)>("fill_rect", &QPainter::fillRect, Arg("r"), Arg("preset"))
            .define_method<void (QPainter::*)(const QRect &, Qt::BrushStyle)>("fill_rect", &QPainter::fillRect, Arg("r"), Arg("style"))
            .define_method<void (QPainter::*)(const QRect &, Qt::GlobalColor)>("fill_rect", &QPainter::fillRect, Arg("r"), Arg("c"))
            .define_method<void (QPainter::*)(const QRect &, const QBrush &)>("fill_rect", &QPainter::fillRect, Arg(""), Arg(""))
            .define_method<void (QPainter::*)(const QRect &, const QColor &)>("fill_rect", &QPainter::fillRect, Arg(""), Arg("color"))
            .define_method<void (QPainter::*)(const QRectF &, QGradient::Preset)>("fill_rect", &QPainter::fillRect, Arg("r"), Arg("preset"))
            .define_method<void (QPainter::*)(const QRectF &, Qt::BrushStyle)>("fill_rect", &QPainter::fillRect, Arg("r"), Arg("style"))
            .define_method<void (QPainter::*)(const QRectF &, Qt::GlobalColor)>("fill_rect", &QPainter::fillRect, Arg("r"), Arg("c"))
            .define_method<void (QPainter::*)(const QRectF &, const QBrush &)>("fill_rect", &QPainter::fillRect, Arg(""), Arg(""))
            .define_method<void (QPainter::*)(const QRectF &, const QColor &)>("fill_rect", &QPainter::fillRect, Arg(""), Arg("color"))
            .define_method<void (QPainter::*)(int, int, int, int, QGradient::Preset)>("fill_rect", &QPainter::fillRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("preset"))
            .define_method<void (QPainter::*)(int, int, int, int, Qt::BrushStyle)>("fill_rect", &QPainter::fillRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("style"))
            .define_method<void (QPainter::*)(int, int, int, int, Qt::GlobalColor)>("fill_rect", &QPainter::fillRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("c"))
            .define_method<void (QPainter::*)(int, int, int, int, const QBrush &)>("fill_rect", &QPainter::fillRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg(""))
            .define_method<void (QPainter::*)(int, int, int, int, const QColor &)>("fill_rect", &QPainter::fillRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("color"))
            .define_method("font", &QPainter::font)
            .define_method("font_info", &QPainter::fontInfo)
            .define_method("font_metrics", &QPainter::fontMetrics)
            .define_method("has_clipping", &QPainter::hasClipping)
            .define_method("active?", &QPainter::isActive)
            .define_method("layout_direction", &QPainter::layoutDirection)
            .define_method("opacity", &QPainter::opacity)
            .define_method("paint_engine", &QPainter::paintEngine)
            .define_method("pen", &QPainter::pen)
            .define_method("render_hints", &QPainter::renderHints)
            .define_method("reset_transform", &QPainter::resetTransform)
            .define_method("restore", &QPainter::restore)
            .define_method("rotate", &QPainter::rotate, Arg("a"))
            .define_method("save", &QPainter::save)
            .define_method("scale", &QPainter::scale, Arg("sx"), Arg("sy"))
            .define_method("set_background", &QPainter::setBackground, Arg("bg"))
            .define_method("set_background_mode", &QPainter::setBackgroundMode, Arg("mode"))
            .define_method<void (QPainter::*)(QColor)>("set_brush", &QPainter::setBrush, Arg("color"))
            .define_method<void (QPainter::*)(Qt::BrushStyle)>("set_brush", &QPainter::setBrush, Arg("style"))
            .define_method<void (QPainter::*)(Qt::GlobalColor)>("set_brush", &QPainter::setBrush, Arg("color"))
            .define_method<void (QPainter::*)(const QBrush &)>("set_brush", &QPainter::setBrush, Arg("brush"))
            .define_method<void (QPainter::*)(const QPoint &)>("set_brush_origin", &QPainter::setBrushOrigin, Arg(""))
            .define_method<void (QPainter::*)(const QPointF &)>("set_brush_origin", &QPainter::setBrushOrigin, Arg(""))
            .define_method<void (QPainter::*)(int, int)>("set_brush_origin", &QPainter::setBrushOrigin, Arg("x"), Arg("y"))
            .define_method("set_clip_path", &QPainter::setClipPath, Arg("path"), Arg("op") = static_cast<Qt::ClipOperation>(Qt::ReplaceClip))
            .define_method<void (QPainter::*)(const QRect &, Qt::ClipOperation)>("set_clip_rect", &QPainter::setClipRect, Arg(""), Arg("op") = static_cast<Qt::ClipOperation>(Qt::ReplaceClip))
            .define_method<void (QPainter::*)(const QRectF &, Qt::ClipOperation)>("set_clip_rect", &QPainter::setClipRect, Arg(""), Arg("op") = static_cast<Qt::ClipOperation>(Qt::ReplaceClip))
            .define_method<void (QPainter::*)(int, int, int, int, Qt::ClipOperation)>("set_clip_rect", &QPainter::setClipRect, Arg("x"), Arg("y"), Arg("w"), Arg("h"), Arg("op") = static_cast<Qt::ClipOperation>(Qt::ReplaceClip))
            .define_method("set_clip_region", &QPainter::setClipRegion, Arg(""), Arg("op") = static_cast<Qt::ClipOperation>(Qt::ReplaceClip))
            .define_method("set_clipping", &QPainter::setClipping, Arg("enable"))
            .define_method("set_composition_mode", &QPainter::setCompositionMode, Arg("mode"))
            .define_method("set_font", &QPainter::setFont, Arg("f"))
            .define_method("set_layout_direction", &QPainter::setLayoutDirection, Arg("direction"))
            .define_method("set_opacity", &QPainter::setOpacity, Arg("opacity"))
            .define_method<void (QPainter::*)(Qt::PenStyle)>("set_pen", &QPainter::setPen, Arg("style"))
            .define_method<void (QPainter::*)(const QColor &)>("set_pen", &QPainter::setPen, Arg("color"))
            .define_method<void (QPainter::*)(const QPen &)>("set_pen", &QPainter::setPen, Arg("pen"))
            .define_method("set_render_hint", &QPainter::setRenderHint, Arg("hint"), Arg("on") = static_cast<bool>(true))
            .define_method("set_render_hints", &QPainter::setRenderHints, Arg("hints"), Arg("on") = static_cast<bool>(true))
            .define_method("set_transform", &QPainter::setTransform, Arg("transform"), Arg("combine") = static_cast<bool>(false))
            .define_method("set_view_transform_enabled", &QPainter::setViewTransformEnabled, Arg("enable"))
            .define_method<void (QPainter::*)(const QRect &)>("set_viewport", &QPainter::setViewport, Arg("viewport"))
            .define_method<void (QPainter::*)(int, int, int, int)>("set_viewport", &QPainter::setViewport, Arg("x"), Arg("y"), Arg("w"), Arg("h"))
            .define_method<void (QPainter::*)(const QRect &)>("set_window", &QPainter::setWindow, Arg("window"))
            .define_method<void (QPainter::*)(int, int, int, int)>("set_window", &QPainter::setWindow, Arg("x"), Arg("y"), Arg("w"), Arg("h"))
            .define_method("set_world_matrix_enabled", &QPainter::setWorldMatrixEnabled, Arg("enabled"))
            .define_method("set_world_transform", &QPainter::setWorldTransform, Arg("matrix"), Arg("combine") = static_cast<bool>(false))
            .define_method("shear", &QPainter::shear, Arg("sh"), Arg("sv"))
            .define_method("stroke_path", &QPainter::strokePath, Arg("path"), Arg("pen"))
            .define_method("test_render_hint", &QPainter::testRenderHint, Arg("hint"))
            .define_method("transform", &QPainter::transform)
            .define_method<void (QPainter::*)(const QPoint &)>("translate", &QPainter::translate, Arg("offset"))
            .define_method<void (QPainter::*)(const QPointF &)>("translate", &QPainter::translate, Arg("offset"))
            .define_method<void (QPainter::*)(qreal, qreal)>("translate", &QPainter::translate, Arg("dx"), Arg("dy"))
            .define_method("view_transform_enabled", &QPainter::viewTransformEnabled)
            .define_method("viewport", &QPainter::viewport)
            .define_method("window", &QPainter::window)
            .define_method("world_matrix_enabled", &QPainter::worldMatrixEnabled)
            .define_method("world_transform", &QPainter::worldTransform);

    Enum<QPainter::CompositionMode> rb_cQPainterCompositionMode =
        // RubyQt6::QtGui::QPainter::CompositionMode
        define_enum_under<QPainter::CompositionMode>("CompositionMode", rb_cQPainter)
            .define_value("CompositionMode_SourceOver", QPainter::CompositionMode::CompositionMode_SourceOver)
            .define_value("CompositionMode_DestinationOver", QPainter::CompositionMode::CompositionMode_DestinationOver)
            .define_value("CompositionMode_Clear", QPainter::CompositionMode::CompositionMode_Clear)
            .define_value("CompositionMode_Source", QPainter::CompositionMode::CompositionMode_Source)
            .define_value("CompositionMode_Destination", QPainter::CompositionMode::CompositionMode_Destination)
            .define_value("CompositionMode_SourceIn", QPainter::CompositionMode::CompositionMode_SourceIn)
            .define_value("CompositionMode_DestinationIn", QPainter::CompositionMode::CompositionMode_DestinationIn)
            .define_value("CompositionMode_SourceOut", QPainter::CompositionMode::CompositionMode_SourceOut)
            .define_value("CompositionMode_DestinationOut", QPainter::CompositionMode::CompositionMode_DestinationOut)
            .define_value("CompositionMode_SourceAtop", QPainter::CompositionMode::CompositionMode_SourceAtop)
            .define_value("CompositionMode_DestinationAtop", QPainter::CompositionMode::CompositionMode_DestinationAtop)
            .define_value("CompositionMode_Xor", QPainter::CompositionMode::CompositionMode_Xor)
            .define_value("CompositionMode_Plus", QPainter::CompositionMode::CompositionMode_Plus)
            .define_value("CompositionMode_Multiply", QPainter::CompositionMode::CompositionMode_Multiply)
            .define_value("CompositionMode_Screen", QPainter::CompositionMode::CompositionMode_Screen)
            .define_value("CompositionMode_Overlay", QPainter::CompositionMode::CompositionMode_Overlay)
            .define_value("CompositionMode_Darken", QPainter::CompositionMode::CompositionMode_Darken)
            .define_value("CompositionMode_Lighten", QPainter::CompositionMode::CompositionMode_Lighten)
            .define_value("CompositionMode_ColorDodge", QPainter::CompositionMode::CompositionMode_ColorDodge)
            .define_value("CompositionMode_ColorBurn", QPainter::CompositionMode::CompositionMode_ColorBurn)
            .define_value("CompositionMode_HardLight", QPainter::CompositionMode::CompositionMode_HardLight)
            .define_value("CompositionMode_SoftLight", QPainter::CompositionMode::CompositionMode_SoftLight)
            .define_value("CompositionMode_Difference", QPainter::CompositionMode::CompositionMode_Difference)
            .define_value("CompositionMode_Exclusion", QPainter::CompositionMode::CompositionMode_Exclusion)
            .define_value("RasterOp_SourceOrDestination", QPainter::CompositionMode::RasterOp_SourceOrDestination)
            .define_value("RasterOp_SourceAndDestination", QPainter::CompositionMode::RasterOp_SourceAndDestination)
            .define_value("RasterOp_SourceXorDestination", QPainter::CompositionMode::RasterOp_SourceXorDestination)
            .define_value("RasterOp_NotSourceAndNotDestination", QPainter::CompositionMode::RasterOp_NotSourceAndNotDestination)
            .define_value("RasterOp_NotSourceOrNotDestination", QPainter::CompositionMode::RasterOp_NotSourceOrNotDestination)
            .define_value("RasterOp_NotSourceXorDestination", QPainter::CompositionMode::RasterOp_NotSourceXorDestination)
            .define_value("RasterOp_NotSource", QPainter::CompositionMode::RasterOp_NotSource)
            .define_value("RasterOp_NotSourceAndDestination", QPainter::CompositionMode::RasterOp_NotSourceAndDestination)
            .define_value("RasterOp_SourceAndNotDestination", QPainter::CompositionMode::RasterOp_SourceAndNotDestination)
            .define_value("RasterOp_NotSourceOrDestination", QPainter::CompositionMode::RasterOp_NotSourceOrDestination)
            .define_value("RasterOp_SourceOrNotDestination", QPainter::CompositionMode::RasterOp_SourceOrNotDestination)
            .define_value("RasterOp_ClearDestination", QPainter::CompositionMode::RasterOp_ClearDestination)
            .define_value("RasterOp_SetDestination", QPainter::CompositionMode::RasterOp_SetDestination)
            .define_value("RasterOp_NotDestination", QPainter::CompositionMode::RasterOp_NotDestination)
            .define_value("NCompositionModes", QPainter::CompositionMode::NCompositionModes);

    Enum<QPainter::PixmapFragmentHint> rb_cQPainterPixmapFragmentHint =
        // RubyQt6::QtGui::QPainter::PixmapFragmentHint
        define_enum_under<QPainter::PixmapFragmentHint>("PixmapFragmentHint", rb_cQPainter)
            .define_value("OpaqueHint", QPainter::PixmapFragmentHint::OpaqueHint);

    Enum<QPainter::RenderHint> rb_cQPainterRenderHint =
        // RubyQt6::QtGui::QPainter::RenderHint
        define_enum_under<QPainter::RenderHint>("RenderHint", rb_cQPainter)
            .define_value("Antialiasing", QPainter::RenderHint::Antialiasing)
            .define_value("TextAntialiasing", QPainter::RenderHint::TextAntialiasing)
            .define_value("SmoothPixmapTransform", QPainter::RenderHint::SmoothPixmapTransform)
            .define_value("VerticalSubpixelPositioning", QPainter::RenderHint::VerticalSubpixelPositioning)
            .define_value("LosslessImageRendering", QPainter::RenderHint::LosslessImageRendering)
            .define_value("NonCosmeticBrushPatterns", QPainter::RenderHint::NonCosmeticBrushPatterns);
}
