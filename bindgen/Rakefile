# frozen_string_literal: true

namespace :bindgen do
  def bindgen(extension:)
    require "ruby-bindgen"
    clang_args = []
    clang_args << "-I/usr/lib/clang/20/include"
    clang_args << "-I./qt6include"
    clang_args << "-I./qt6include/#{extension}"
    clang_args << "-xc++"
    inputter = RubyBindgen::Inputter.new("qt6include/#{extension}", "*.h")
    outputter = RubyBindgen::Outputter.new("qt6rice/#{extension}")
    parser = RubyBindgen::Parser.new(inputter, clang_args)
    format = RubyBindgen::Visitors::Rice.new(extension, outputter)
    parser.generate(format, parallel: true)
  end

  qt6libs = ["QtCore", "QtGui", "QtWidgets"]
  qt6libs.each do |lib|
    desc "Generate Rice bindings for #{lib.sub("Qt", "libQt6")}"
    task lib.downcase do
      FileUtils.mkdir_p("qt6rice")
      bindgen(extension: lib)
    end
  end

  desc "Generate Rice bindings for libQt6"
  task "all" do
    FileUtils.mkdir_p("qt6rice")
    qt6libs.each { |lib| bindgen(extension: lib) }
  end
end

desc "Update libQt6 headers"
namespace :upinc do
  def upinc(pkg:)
    url = "https://mirror.rackspace.com/archlinux/extra/os/x86_64/#{pkg}-x86_64.pkg.tar.zst"
    inf = "tmp/downloads/#{pkg}.pkg.tar.zst"
    out = "tmp/downloads/#{pkg}"

    if File.exist?(inf)
      puts "found #{inf}"
    else
      sh "mkdir -p tmp/downloads"
      sh "curl -L --progress-bar -o #{inf} #{url}"
    end

    sh "mkdir -p #{out} && rm -rf #{out}/*"
    sh "tar --zstd -xf #{inf} --directory=#{out}"
    sh "cp -r #{out}/usr/include/qt6 qt6include"
  end

  task :qtbase do
    FileUtils.rm_rf("qt6include")
    upinc(pkg: "qt6-base-6.9.1-5")
  end
end

task :default do
  system("rake --tasks")
end
