#include "qrect-rb.hpp"
#include <qrect.h>

using namespace Rice;

Rice::Class rb_cQRect;
Rice::Class rb_cQRectF;

void Init_qrect(Rice::Module rb_mQt6QtCore)
{
    rb_cQRect =
        // RubyQt6::QtCore::QRect
        define_class_under<QRect>(rb_mQt6QtCore, "QRect")
            // RubyQt6-Defined Functions
            .define_singleton_function("_operator_equal", [](QRect *lhs, QRect  *rhs) -> bool { return *lhs == *rhs; }, Arg("lhs"), Arg("rhs"))
            .define_singleton_function("_operator_equal", [](QRect *lhs, QRectF *rhs) -> bool { return *lhs == *rhs; }, Arg("lhs"), Arg("rhs"))
            // Constructor
            .define_constructor(Constructor<QRect>())
            .define_constructor(Constructor<QRect, int, int, int, int>(), Arg("x"), Arg("y"), Arg("width"), Arg("height"))
            .define_constructor(Constructor<QRect, const QPoint &, const QPoint &>(), Arg("top_left"), Arg("bottom_right"))
            .define_constructor(Constructor<QRect, const QPoint &, const QSize &>(), Arg("top_left"), Arg("size"))
            // Public Functions
            .define_method("adjust", &QRect::adjust, Arg("dx1"), Arg("dy1"), Arg("dx2"), Arg("dy2"))
            .define_method("adjusted", &QRect::adjusted, Arg("dx1"), Arg("dy1"), Arg("dx2"), Arg("dy2"))
            .define_method("bottom", &QRect::bottom)
            .define_method("bottom_left", &QRect::bottomLeft)
            .define_method("bottom_right", &QRect::bottomRight)
            .define_method("center", &QRect::center)
            .define_method<bool (QRect::*)(const QPoint &, bool) const noexcept>("contains", &QRect::contains, Arg("p"), Arg("proper") = false)
            .define_method<bool (QRect::*)(const QRect &, bool) const noexcept>("contains", &QRect::contains, Arg("r"), Arg("proper") = false)
            .define_method<bool (QRect::*)(int, int) const noexcept>("contains", &QRect::contains, Arg("x"), Arg("y"))
            .define_method<bool (QRect::*)(int, int, bool) const noexcept>("contains", &QRect::contains, Arg("x"), Arg("y"), Arg("proper"))
            .define_method("get_coords", &QRect::getCoords, Arg("x1"), Arg("y1"), Arg("x2"), Arg("y2"))
            .define_method("get_rect", &QRect::getRect, Arg("x"), Arg("y"), Arg("width"), Arg("height"))
            .define_method("height", &QRect::height)
            .define_method("intersected", &QRect::intersected, Arg("other"))
            .define_method("intersects", &QRect::intersects, Arg("r"))
            .define_method("empty?", &QRect::isEmpty)
            .define_method("null?", &QRect::isNull)
            .define_method("valid?", &QRect::isValid)
            .define_method("left", &QRect::left)
            .define_method("margins_added", &QRect::marginsAdded, Arg("margins"))
            .define_method("margins_removed", &QRect::marginsRemoved, Arg("margins"))
            .define_method("move_bottom", &QRect::moveBottom, Arg("y"))
            .define_method("move_bottom_left", &QRect::moveBottomLeft, Arg("position"))
            .define_method("move_bottom_right", &QRect::moveBottomRight, Arg("position"))
            .define_method("move_center", &QRect::moveCenter, Arg("position"))
            .define_method("move_left", &QRect::moveLeft, Arg("x"))
            .define_method("move_right", &QRect::moveRight, Arg("x"))
            .define_method<void (QRect::*)(const QPoint &)>("move_to", &QRect::moveTo, Arg("position"))
            .define_method<void (QRect::*)(int, int)>("move_to", &QRect::moveTo, Arg("x"), Arg("y"))
            .define_method("move_top", &QRect::moveTop, Arg("y"))
            .define_method("move_top_left", &QRect::moveTopLeft, Arg("position"))
            .define_method("move_top_right", &QRect::moveTopRight, Arg("position"))
            .define_method("normalized", &QRect::normalized)
            .define_method("right", &QRect::right)
            .define_method("set_bottom", &QRect::setBottom, Arg("y"))
            .define_method("set_bottom_left", &QRect::setBottomLeft, Arg("position"))
            .define_method("set_bottom_right", &QRect::setBottomRight, Arg("position"))
            .define_method("set_coords", &QRect::setCoords, Arg("x1"), Arg("y1"), Arg("x2"), Arg("y2"))
            .define_method("set_height", &QRect::setHeight, Arg("height"))
            .define_method("set_left", &QRect::setLeft, Arg("x"))
            .define_method("set_rect", &QRect::setRect, Arg("x"), Arg("y"), Arg("width"), Arg("height"))
            .define_method("set_right", &QRect::setRight, Arg("x"))
            .define_method("set_size", &QRect::setSize, Arg("size"))
            .define_method("set_top", &QRect::setTop, Arg("y"))
            .define_method("set_top_left", &QRect::setTopLeft, Arg("position"))
            .define_method("set_top_right", &QRect::setTopRight, Arg("position"))
            .define_method("set_width", &QRect::setWidth, Arg("width"))
            .define_method("set_x", &QRect::setX, Arg("x"))
            .define_method("set_y", &QRect::setY, Arg("y"))
            .define_method("size", &QRect::size)
            .define_method("to_rect_f", &QRect::toRectF)
            .define_method("top", &QRect::top)
            .define_method("top_left", &QRect::topLeft)
            .define_method("top_right", &QRect::topRight)
            .define_method<void (QRect::*)(const QPoint &)>("translate", &QRect::translate, Arg("offset"))
            .define_method<void (QRect::*)(int, int)>("translate", &QRect::translate, Arg("dx"), Arg("dy"))
            .define_method<QRect (QRect::*)(const QPoint &) const>("translated", &QRect::translated, Arg("offset"))
            .define_method<QRect (QRect::*)(int, int) const>("translated", &QRect::translated, Arg("dx"), Arg("dy"))
            .define_method("transposed", &QRect::transposed)
            .define_method("united", &QRect::united, Arg("other"))
            .define_method("width", &QRect::width)
            .define_method("x", &QRect::x)
            .define_method("y", &QRect::y);

    rb_cQRectF =
        // RubyQt6::QtCore::QRectF
        define_class_under<QRectF>(rb_mQt6QtCore, "QRectF")
            // RubyQt6-Defined Functions
            .define_singleton_function("_operator_equal", [](QRectF *lhs, QRect  *rhs) -> bool { return *lhs == *rhs; }, Arg("lhs"), Arg("rhs"))
            .define_singleton_function("_operator_equal", [](QRectF *lhs, QRectF *rhs) -> bool { return *lhs == *rhs; }, Arg("lhs"), Arg("rhs"))
            // Constructor
            .define_constructor(Constructor<QRectF>())
            .define_constructor(Constructor<QRectF, qreal, qreal, qreal, qreal>(), Arg("x"), Arg("y"), Arg("width"), Arg("height"))
            .define_constructor(Constructor<QRectF, const QPointF &, const QPointF &>(), Arg("top_left"), Arg("bottom_right"))
            .define_constructor(Constructor<QRectF, const QPointF &, const QSizeF &>(), Arg("top_left"), Arg("size"))
            .define_constructor(Constructor<QRectF, const QRect &>(), Arg("rect"))
            // Public Functions
            .define_method("adjust", &QRectF::adjust, Arg("dx1"), Arg("dy1"), Arg("dx2"), Arg("dy2"))
            .define_method("adjusted", &QRectF::adjusted, Arg("dx1"), Arg("dy1"), Arg("dx2"), Arg("dy2"))
            .define_method("bottom", &QRectF::bottom)
            .define_method("bottom_left", &QRectF::bottomLeft)
            .define_method("bottom_right", &QRectF::bottomRight)
            .define_method("center", &QRectF::center)
            .define_method<bool (QRectF::*)(const QPointF &) const noexcept>("contains", &QRectF::contains, Arg("p"))
            .define_method<bool (QRectF::*)(const QRectF &) const noexcept>("contains", &QRectF::contains, Arg("r"))
            .define_method<bool (QRectF::*)(qreal, qreal) const noexcept>("contains", &QRectF::contains, Arg("x"), Arg("y"))
            .define_method("get_coords", &QRectF::getCoords, Arg("x1"), Arg("y1"), Arg("x2"), Arg("y2"))
            .define_method("get_rect", &QRectF::getRect, Arg("x"), Arg("y"), Arg("width"), Arg("height"))
            .define_method("height", &QRectF::height)
            .define_method("intersected", &QRectF::intersected, Arg("other"))
            .define_method("intersects", &QRectF::intersects, Arg("r"))
            .define_method("empty?", &QRectF::isEmpty)
            .define_method("null?", &QRectF::isNull)
            .define_method("valid?", &QRectF::isValid)
            .define_method("left", &QRectF::left)
            .define_method("margins_added", &QRectF::marginsAdded, Arg("margins"))
            .define_method("margins_removed", &QRectF::marginsRemoved, Arg("margins"))
            .define_method("move_bottom", &QRectF::moveBottom, Arg("y"))
            .define_method("move_bottom_left", &QRectF::moveBottomLeft, Arg("position"))
            .define_method("move_bottom_right", &QRectF::moveBottomRight, Arg("position"))
            .define_method("move_center", &QRectF::moveCenter, Arg("position"))
            .define_method("move_left", &QRectF::moveLeft, Arg("x"))
            .define_method("move_right", &QRectF::moveRight, Arg("x"))
            .define_method<void (QRectF::*)(const QPointF &)>("move_to", &QRectF::moveTo, Arg("position"))
            .define_method<void (QRectF::*)(qreal, qreal)>("move_to", &QRectF::moveTo, Arg("x"), Arg("y"))
            .define_method("move_top", &QRectF::moveTop, Arg("y"))
            .define_method("move_top_left", &QRectF::moveTopLeft, Arg("position"))
            .define_method("move_top_right", &QRectF::moveTopRight, Arg("position"))
            .define_method("normalized", &QRectF::normalized)
            .define_method("right", &QRectF::right)
            .define_method("set_bottom", &QRectF::setBottom, Arg("y"))
            .define_method("set_bottom_left", &QRectF::setBottomLeft, Arg("position"))
            .define_method("set_bottom_right", &QRectF::setBottomRight, Arg("position"))
            .define_method("set_coords", &QRectF::setCoords, Arg("x1"), Arg("y1"), Arg("x2"), Arg("y2"))
            .define_method("set_height", &QRectF::setHeight, Arg("height"))
            .define_method("set_left", &QRectF::setLeft, Arg("x"))
            .define_method("set_rect", &QRectF::setRect, Arg("x"), Arg("y"), Arg("width"), Arg("height"))
            .define_method("set_right", &QRectF::setRight, Arg("x"))
            .define_method("set_size", &QRectF::setSize, Arg("size"))
            .define_method("set_top", &QRectF::setTop, Arg("y"))
            .define_method("set_top_left", &QRectF::setTopLeft, Arg("position"))
            .define_method("set_top_right", &QRectF::setTopRight, Arg("position"))
            .define_method("set_width", &QRectF::setWidth, Arg("width"))
            .define_method("set_x", &QRectF::setX, Arg("x"))
            .define_method("set_y", &QRectF::setY, Arg("y"))
            .define_method("size", &QRectF::size)
            .define_method("to_rect", &QRectF::toRect)
            .define_method("top", &QRectF::top)
            .define_method("top_left", &QRectF::topLeft)
            .define_method("top_right", &QRectF::topRight)
            .define_method<void (QRectF::*)(const QPointF &)>("translate", &QRectF::translate, Arg("offset"))
            .define_method<void (QRectF::*)(qreal, qreal)>("translate", &QRectF::translate, Arg("dx"), Arg("dy"))
            .define_method<QRectF (QRectF::*)(const QPointF &) const>("translated", &QRectF::translated, Arg("offset"))
            .define_method<QRectF (QRectF::*)(qreal, qreal) const>("translated", &QRectF::translated, Arg("dx"), Arg("dy"))
            .define_method("transposed", &QRectF::transposed)
            .define_method("united", &QRectF::united, Arg("other"))
            .define_method("width", &QRectF::width)
            .define_method("x", &QRectF::x)
            .define_method("y", &QRectF::y);
}
